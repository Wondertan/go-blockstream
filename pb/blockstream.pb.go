// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/blockstream.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BlockStream_Type int32

const (
	REQUEST   BlockStream_Type = 0
	RESPONSE  BlockStream_Type = 1
	HANDSHAKE BlockStream_Type = 3
)

var BlockStream_Type_name = map[int32]string{
	0: "REQUEST",
	1: "RESPONSE",
	3: "HANDSHAKE",
}

var BlockStream_Type_value = map[string]int32{
	"REQUEST":   0,
	"RESPONSE":  1,
	"HANDSHAKE": 3,
}

func (BlockStream_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_61a7eef5b64415ec, []int{0, 0}
}

type BlockStream_ErrorCode int32

const (
	Null     BlockStream_ErrorCode = 0
	Unknown  BlockStream_ErrorCode = 1
	NotFound BlockStream_ErrorCode = 2
)

var BlockStream_ErrorCode_name = map[int32]string{
	0: "Null",
	1: "Unknown",
	2: "NotFound",
}

var BlockStream_ErrorCode_value = map[string]int32{
	"Null":     0,
	"Unknown":  1,
	"NotFound": 2,
}

func (BlockStream_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_61a7eef5b64415ec, []int{0, 1}
}

type BlockStream struct {
	Type   BlockStream_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=pb.BlockStream_Type" json:"type,omitempty"`
	Id     uint32                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Cids   [][]byte              `protobuf:"bytes,3,rep,name=cids,proto3" json:"cids,omitempty"`
	Blocks [][]byte              `protobuf:"bytes,4,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Token  string                `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	Error  BlockStream_ErrorCode `protobuf:"varint,6,opt,name=error,proto3,enum=pb.BlockStream_ErrorCode" json:"error,omitempty"`
}

func (m *BlockStream) Reset()      { *m = BlockStream{} }
func (*BlockStream) ProtoMessage() {}
func (*BlockStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_61a7eef5b64415ec, []int{0}
}
func (m *BlockStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockStream.Merge(m, src)
}
func (m *BlockStream) XXX_Size() int {
	return m.Size()
}
func (m *BlockStream) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockStream.DiscardUnknown(m)
}

var xxx_messageInfo_BlockStream proto.InternalMessageInfo

func (m *BlockStream) GetType() BlockStream_Type {
	if m != nil {
		return m.Type
	}
	return REQUEST
}

func (m *BlockStream) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BlockStream) GetCids() [][]byte {
	if m != nil {
		return m.Cids
	}
	return nil
}

func (m *BlockStream) GetBlocks() [][]byte {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *BlockStream) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BlockStream) GetError() BlockStream_ErrorCode {
	if m != nil {
		return m.Error
	}
	return Null
}

func init() {
	proto.RegisterEnum("pb.BlockStream_Type", BlockStream_Type_name, BlockStream_Type_value)
	proto.RegisterEnum("pb.BlockStream_ErrorCode", BlockStream_ErrorCode_name, BlockStream_ErrorCode_value)
	proto.RegisterType((*BlockStream)(nil), "pb.BlockStream")
}

func init() { proto.RegisterFile("pb/blockstream.proto", fileDescriptor_61a7eef5b64415ec) }

var fileDescriptor_61a7eef5b64415ec = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x4e, 0xc2, 0x50,
	0x10, 0xc6, 0xdf, 0x94, 0x82, 0x30, 0xfc, 0x49, 0xf3, 0x42, 0x4c, 0xdd, 0x4c, 0x1a, 0x56, 0x5d,
	0x15, 0xa2, 0x5e, 0x00, 0xb4, 0x86, 0xc4, 0xa4, 0xea, 0x2b, 0x1c, 0xc0, 0xd2, 0x2e, 0x08, 0xd8,
	0xd7, 0x94, 0x12, 0xc3, 0xce, 0x23, 0x78, 0x02, 0xd7, 0x1e, 0xc5, 0x25, 0x4b, 0x96, 0xf2, 0xd8,
	0xb8, 0xe4, 0x08, 0xa6, 0xad, 0x31, 0xc6, 0xdd, 0x7c, 0xf3, 0xfb, 0xf2, 0x7d, 0x93, 0xc1, 0x6e,
	0x12, 0xf4, 0x83, 0xa5, 0x9c, 0x2d, 0x56, 0x59, 0x1a, 0x3d, 0x3e, 0x39, 0x49, 0x2a, 0x33, 0xc9,
	0xb5, 0x24, 0xe8, 0xbd, 0x69, 0xd8, 0x1c, 0xe5, 0xc4, 0x2f, 0x08, 0xb7, 0x51, 0xcf, 0x36, 0x49,
	0x64, 0x82, 0x05, 0x76, 0xe7, 0xbc, 0xeb, 0x24, 0x81, 0xf3, 0x07, 0x3b, 0x93, 0x4d, 0x12, 0x89,
	0xc2, 0xc1, 0x3b, 0xa8, 0xcd, 0x43, 0x53, 0xb3, 0xc0, 0x6e, 0x0b, 0x6d, 0x1e, 0x72, 0x8e, 0xfa,
	0x6c, 0x1e, 0xae, 0xcc, 0x8a, 0x55, 0xb1, 0x5b, 0xa2, 0x98, 0xf9, 0x29, 0xd6, 0xca, 0x5a, 0x53,
	0x2f, 0xb6, 0x3f, 0x8a, 0x77, 0xb1, 0x9a, 0xc9, 0x45, 0x14, 0x9b, 0x55, 0x0b, 0xec, 0x86, 0x28,
	0x05, 0xef, 0x63, 0x35, 0x4a, 0x53, 0x99, 0x9a, 0xb5, 0xa2, 0xfc, 0xec, 0x7f, 0xb9, 0x9b, 0xc3,
	0x2b, 0x19, 0x46, 0xa2, 0xf4, 0xf5, 0x06, 0xa8, 0xe7, 0x07, 0xf1, 0x26, 0x9e, 0x08, 0xf7, 0x61,
	0xea, 0xfa, 0x13, 0x83, 0xf1, 0x16, 0xd6, 0x85, 0xeb, 0xdf, 0xdf, 0x79, 0xbe, 0x6b, 0x00, 0x6f,
	0x63, 0x63, 0x3c, 0xf4, 0xae, 0xfd, 0xf1, 0xf0, 0xd6, 0x35, 0x2a, 0xbd, 0x01, 0x36, 0x7e, 0x53,
	0x78, 0x1d, 0x75, 0x6f, 0xbd, 0x5c, 0x1a, 0x2c, 0x0f, 0x98, 0xc6, 0x8b, 0x58, 0x3e, 0xc7, 0x06,
	0xe4, 0x01, 0x9e, 0xcc, 0x6e, 0xe4, 0x3a, 0x0e, 0x0d, 0x6d, 0x74, 0xb9, 0xdd, 0x13, 0xdb, 0xed,
	0x89, 0x1d, 0xf7, 0x04, 0x2f, 0x8a, 0xe0, 0x5d, 0x11, 0x7c, 0x28, 0x82, 0xad, 0x22, 0xf8, 0x54,
	0x04, 0x5f, 0x8a, 0xd8, 0x51, 0x11, 0xbc, 0x1e, 0x88, 0x6d, 0x0f, 0xc4, 0x76, 0x07, 0x62, 0x41,
	0xad, 0xf8, 0xf0, 0xc5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0xa1, 0x32, 0x6c, 0x79, 0x01,
	0x00, 0x00,
}

func (x BlockStream_Type) String() string {
	s, ok := BlockStream_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BlockStream_ErrorCode) String() string {
	s, ok := BlockStream_ErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *BlockStream) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockStream)
	if !ok {
		that2, ok := that.(BlockStream)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Cids) != len(that1.Cids) {
		return false
	}
	for i := range this.Cids {
		if !bytes.Equal(this.Cids[i], that1.Cids[i]) {
			return false
		}
	}
	if len(this.Blocks) != len(that1.Blocks) {
		return false
	}
	for i := range this.Blocks {
		if !bytes.Equal(this.Blocks[i], that1.Blocks[i]) {
			return false
		}
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *BlockStream) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.BlockStream{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Cids: "+fmt.Sprintf("%#v", this.Cids)+",\n")
	s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBlockstream(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BlockStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		i = encodeVarintBlockstream(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBlockstream(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Blocks[iNdEx])
			copy(dAtA[i:], m.Blocks[iNdEx])
			i = encodeVarintBlockstream(dAtA, i, uint64(len(m.Blocks[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Cids) > 0 {
		for iNdEx := len(m.Cids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cids[iNdEx])
			copy(dAtA[i:], m.Cids[iNdEx])
			i = encodeVarintBlockstream(dAtA, i, uint64(len(m.Cids[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Id != 0 {
		i = encodeVarintBlockstream(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintBlockstream(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlockstream(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlockstream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBlockstream(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovBlockstream(uint64(m.Id))
	}
	if len(m.Cids) > 0 {
		for _, b := range m.Cids {
			l = len(b)
			n += 1 + l + sovBlockstream(uint64(l))
		}
	}
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			l = len(b)
			n += 1 + l + sovBlockstream(uint64(l))
		}
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBlockstream(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovBlockstream(uint64(m.Error))
	}
	return n
}

func sovBlockstream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlockstream(x uint64) (n int) {
	return sovBlockstream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BlockStream) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockStream{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Cids:` + fmt.Sprintf("%v", this.Cids) + `,`,
		`Blocks:` + fmt.Sprintf("%v", this.Blocks) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBlockstream(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BlockStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BlockStream_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cids = append(m.Cids, make([]byte, postIndex-iNdEx))
			copy(m.Cids[len(m.Cids)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, make([]byte, postIndex-iNdEx))
			copy(m.Blocks[len(m.Blocks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= BlockStream_ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlockstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockstream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlockstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockstream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockstream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockstream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockstream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlockstream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlockstream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlockstream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlockstream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockstream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlockstream = fmt.Errorf("proto: unexpected end of group")
)
